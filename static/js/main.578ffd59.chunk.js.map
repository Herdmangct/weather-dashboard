{"version":3,"sources":["models/weather-object.js","API/weatherAPI.js","components/Header/Header.js","components/InformationBar/WeatherCard.js","components/General/Divider.js","components/InformationBar/InformationBar.js","components/WeatherWidget.js","App.js","serviceWorker.js","index.js"],"names":["WeatherObject","temperature","weatherConditions","this","API_KEY","getTodaysWeather","city","a","axios","get","then","data","todaysTemperature","main","temp","toFixed","todaysWeatherConditionID","weather","id","getFutureWeather","list","averageTemps","forEach","period","date","Date","dt","getDate","hasOwnProperty","push","Object","keys","key","temperatures","tempSum","reduce","total","length","dayNumberToString","days","1","2","3","4","5","6","0","getDay","dayNumber","monthNumberToString","months","7","8","9","10","11","getMonth","monthNumber","dateToDayString","startDateObject","difference","styles","headerContent","flex","color","backgroundImage","backgroundSize","backgroundRepeat","paddingTop","paddingLeft","weatherIcon","fontSize","degreesContainer","display","justifyContent","degrees","marginTop","Header","props","currentTemperature","currentWeatherID","currentDate","style","Row","Col","md","span","className","Spinner","animation","role","cardInfo","width","height","flexDirection","alignItems","padding","day","WeatherCard","weatherConditionsID","divider","borderLeft","borderLeftColor","marginBottom","boxShadow","Divider","informationBar","textAlign","backgroundColor","contentContainer","margin","InformationBar","forecastInformation","forecastDates","filter","map","i","Fragment","WeatherWidget","state","today","forecast","fetchWeatherForecast","bind","queryCity","queryString","parse","history","location","search","replace","setState","catch","error","alert","weatherWidgetContainer","Component","borderRadius","overflow","App","Container","offset","appContainer","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.578ffd59.chunk.js","sourcesContent":["class WeatherObject {\n  constructor(temperature, weatherConditions) {\n    this.temperature = temperature;\n    this.weatherConditions = weatherConditions;\n  }\n}\n\nexport default WeatherObject;\n","// External Libraries\nimport axios from \"axios\";\n\n// My Models\nimport WeatherObject from \"../models/weather-object\";\n\nexport const API_KEY = \"c6962698473bb5316ec1ea448ce1e814\";\n\nexport const getTodaysWeather = async city => {\n  /**\n   * Gets todays weather from the owm\n   */\n\n  return await axios\n    .get(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}`\n    )\n    .then(({ data }) => {\n      return {\n        todaysTemperature: data.main.temp.toFixed(0),\n        todaysWeatherConditionID: data.weather[0].id\n      };\n    });\n};\n\nexport const getFutureWeather = async city => {\n  return await axios\n    .get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${API_KEY}`\n    )\n    .then(({ data }) => {\n      const { list } = data;\n\n      // make an object with key: date value: WeatherObject\n      // WeatherObject temperature: array of all temps for different hours of the day\n      // WeatherObject WeatherCondition: id of the weather condition\n      const averageTemps = {};\n      list.forEach(period => {\n        const date = new Date(period.dt * 1000).getDate();\n        if (averageTemps.hasOwnProperty(date)) {\n          averageTemps[date].temperature.push(period.main.temp);\n        } else {\n          averageTemps[date] = new WeatherObject(\n            [period.main.temp],\n            period.weather[0].id\n          );\n        }\n      });\n\n      // average the temperature arrays (each array entry is a 3hourly temperature prediction)\n      for (const key of Object.keys(averageTemps)) {\n        const temperatures = averageTemps[key].temperature;\n        if (temperatures !== []) {\n          const tempSum = temperatures.reduce((total, temp) => {\n            return total + temp;\n          });\n          averageTemps[key].temperature = (\n            tempSum / temperatures.length\n          ).toFixed(0);\n        }\n      }\n\n      return averageTemps;\n    });\n};\n\nexport const dayNumberToString = {\n  days: {\n    1: \"Monday\",\n    2: \"Tuesday\",\n    3: \"Wednesday\",\n    4: \"Thursday\",\n    5: \"Friday\",\n    6: \"Saturday\",\n    0: \"Sunday\"\n  },\n  getDay: function(dayNumber) {\n    return this.days[dayNumber];\n  }\n};\n\nexport const monthNumberToString = {\n  months: {\n    0: \"January\",\n    1: \"February\",\n    2: \"March\",\n    3: \"April\",\n    4: \"May\",\n    5: \"June\",\n    6: \"July\",\n    7: \"August\",\n    8: \"September\",\n    9: \"October\",\n    10: \"November\",\n    11: \"December\"\n  },\n  getMonth: function(monthNumber) {\n    return this.months[monthNumber];\n  }\n};\n\nexport const dateToDayString = (startDateObject, date) => {\n  /**\n   * Given a startDate:int and a date:int (> startDate) converts the date into the name of the day (String)\n   */\n  const difference = date - startDateObject.getDate();\n  const dayNumber = (startDateObject.getDay() + difference) % 7;\n  return dayNumberToString.getDay(dayNumber);\n};\n","import React from \"react\";\n\n// Bootstrap\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\n// My API\nimport { dayNumberToString, monthNumberToString } from \"../../API/weatherAPI\";\n\nconst Header = props => {\n  const { currentTemperature, currentWeatherID, currentDate } = props;\n\n  if (currentWeatherID && currentWeatherID) {\n    return (\n      <div style={styles.headerContent}>\n        <Row>\n          <Col md={{ span: 2 }}>\n            <i\n              className={`wi wi-owm-${currentWeatherID}`}\n              style={styles.weatherIcon}\n            ></i>\n          </Col>\n          <Col md={{ span: 3 }} style={styles.degreesContainer}>\n            <h1 style={styles.degrees}>{currentTemperature}&#176;</h1>\n          </Col>\n          <Col md={{ span: 6 }}></Col>\n        </Row>\n        <Row>\n          <Col style={styles.date}>\n            <h1>\n              {dayNumberToString.getDay(currentDate.getDay())},{\" \"}\n              {monthNumberToString.getMonth(currentDate.getMonth())}{\" \"}\n              {currentDate.getDate()}\n            </h1>\n          </Col>\n        </Row>\n      </div>\n    );\n  } else {\n    return (\n      <div\n        style={{\n          ...styles.headerContent,\n          display: \"flex\",\n          justifyContent: \"center\"\n        }}\n      >\n        <Spinner animation=\"border\" role=\"status\" color=\"white\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      </div>\n    );\n  }\n};\n\nconst styles = {\n  headerContent: {\n    flex: 6,\n    color: \"white\",\n    backgroundImage: `url(https://i.pinimg.com/originals/07/c3/4e/07c34e6089463bae34075960643cb9e9.jpg)`,\n    backgroundSize: \"100% 100%\",\n    backgroundRepeat: \"no-repeat\",\n    paddingTop: \"40px\",\n    paddingLeft: \"40px\"\n  },\n  weatherIcon: {\n    fontSize: \"105px\"\n  },\n  degreesContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\"\n  },\n  degrees: {\n    fontSize: \"90px\"\n  },\n  date: {\n    marginTop: \"15px\"\n  }\n};\n\nexport default Header;\n","import React from \"react\";\n\n// Bootstrap\nimport Col from \"react-bootstrap/Col\";\n\nconst WeatherCard = props => {\n  const { day, temperature, weatherConditionsID } = props;\n  return (\n    <Col>\n      <div style={styles.cardInfo}>\n        <i\n          className={`wi wi-owm-${weatherConditionsID}`}\n          style={styles.weatherIcon}\n        ></i>\n        <h3 style={styles.day}>{day}</h3>\n        <h4 style={styles.degrees}> {temperature}&#176;</h4>\n      </div>\n    </Col>\n  );\n};\n\nconst styles = {\n  cardInfo: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: \"25px\"\n  },\n  weatherIcon: {\n    fontSize: \"90px\",\n    color: \"#f58520\"\n  },\n  day: {\n    marginTop: \"10px\",\n    color: \"#F6B27E\"\n  },\n  degrees: {\n    color: \"#f58520\"\n  }\n};\n\nexport default WeatherCard;\n","import React from \"react\";\n\nconst Divider = () => {\n  return <div style={styles.divider}></div>;\n};\n\nconst styles = {\n  divider: {\n    width: \"2px\",\n    borderLeft: \"1px solid \",\n    borderLeftColor: \"#c9c9c9\",\n    marginBottom: \"40px\",\n    marginTop: \"40px\",\n    boxShadow: \"0 0 1px 0 white inset, 0 0 1px 0 white\"\n  }\n};\n\nexport default Divider;\n","import React from \"react\";\n\nimport Row from \"react-bootstrap/Row\";\n\n// My Components\nimport WeatherCard from \"./WeatherCard\";\nimport Divider from \"../General/Divider\";\n\n// My API\nimport { dateToDayString } from \"../../API/weatherAPI\";\n\n// Bootstrap\n\nconst InformationBar = props => {\n  const { forecastInformation, currentDate } = props;\n  const forecastDates = Object.keys(forecastInformation).filter(date => {\n    return date > currentDate.getDate() && date <= currentDate.getDate() + 4;\n  });\n\n  return (\n    <div style={styles.informationBar}>\n      <Row style={styles.contentContainer}>\n        {forecastDates.map((date, i) => (\n          <React.Fragment key={i}>\n            <WeatherCard\n              day={i === 0 ? \"Tomorrow\" : dateToDayString(currentDate, date)}\n              temperature={forecastInformation[date].temperature}\n              weatherConditionsID={forecastInformation[date].weatherConditions}\n            />\n            {i < 3 ? <Divider /> : \"\"}\n          </React.Fragment>\n        ))}\n        {/* {[...Array(4)].map((x, i) => (\n          <React.Fragment key={i}>\n            <WeatherCard dayNumber={i + 1} />\n            {i < 3 ? <Divider /> : \"\"}\n          </React.Fragment>\n        ))} */}\n      </Row>\n    </div>\n  );\n};\n\nconst styles = {\n  informationBar: {\n    textAlign: \"center\",\n    flex: 3,\n    backgroundColor: \"white\"\n  },\n  contentContainer: {\n    margin: 0,\n    height: \"100%\"\n  }\n};\n\nexport default InformationBar;\n","import React, { Component } from \"react\";\n\n// External Libraries\nimport queryString from \"query-string\";\n\n// My Components\nimport Header from \"./Header/Header\";\nimport InformationBar from \"./InformationBar/InformationBar\";\n\n// My Models\nimport WeatherObject from \"../models/weather-object\";\n\n// API KEY\nimport { getTodaysWeather, getFutureWeather } from \"../API/weatherAPI\";\n\nclass WeatherWidget extends Component {\n  constructor() {\n    super();\n    this.state = {\n      city: \"Sydney\",\n      today: {},\n      forecast: {},\n      currentDate: new Date()\n    };\n    this.fetchWeatherForecast = this.fetchWeatherForecast.bind(this);\n  }\n\n  componentDidMount() {\n    const queryCity = queryString.parse(this.props.history.location.search)\n      .city;\n    const city = queryCity ? queryCity : this.state.city;\n    this.props.history.replace(\"\");\n    this.props.history.push(`?city=${city}`);\n    this.fetchWeatherForecast(city);\n  }\n\n  async fetchWeatherForecast(city = this.state.city) {\n    // Update current date object\n    this.setState({ currentDate: new Date() });\n\n    // get weather for today\n    getTodaysWeather(city)\n      .then(({ todaysTemperature, todaysWeatherConditionID }) => {\n        this.setState({\n          today: new WeatherObject(todaysTemperature, todaysWeatherConditionID)\n        });\n      })\n      .catch(error => {\n        alert(\n          `Error: Invalid city entered in the url \\nPlease enter a valid city, \\nredirecting to Sydney weather`\n        );\n        this.props.history.push(`?city=Sydney`);\n        this.fetchWeatherForecast(\"Sydney\");\n      });\n\n    // get weather forecast\n    getFutureWeather(city).then(forecast => {\n      this.setState({\n        forecast: forecast\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div style={styles.weatherWidgetContainer}>\n        <Header\n          currentTemperature={this.state.today.temperature}\n          currentWeatherID={this.state.today.weatherConditions}\n          currentDate={this.state.currentDate}\n        />\n        <InformationBar\n          forecastInformation={this.state.forecast}\n          currentDate={this.state.currentDate}\n        />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  weatherWidgetContainer: {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginTop: \"10px\",\n    boxShadow:\n      \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n    borderRadius: \"10px\",\n    overflow: \"hidden\"\n  }\n};\n\nexport default WeatherWidget;\n","import React, { Component } from \"react\";\n\n// External Libraries\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n// My Components\nimport WeatherWidget from \"./components/WeatherWidget\";\n\n// Bootstrap\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Container>\n          <Row>\n            <Col md={{ span: 10, offset: 1 }} style={styles.appContainer}>\n              <Route path=\"/\" component={WeatherWidget} />\n              {/* <WeatherWidget /> */}\n            </Col>\n          </Row>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nconst styles = {\n  appContainer: {\n    height: \"700px\"\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Bootstrap\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// css\nimport \"./css/weather-icons.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}